import { useState, useEffect, useCallback } from 'react';

function ChatList({ client, onChatSelect }) {
  const [chats, setChats] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [isRefreshing, setIsRefreshing] = useState(false);

  // –í—ã–Ω–æ—Å–∏–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  const fetchChats = useCallback(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      const result = await client.send({
        '@type': 'getChats',
        'offset_order': '9223372036854775807',
        'offset_chat_id': 0,
        'limit': 100
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const chatsWithDetails = await Promise.all(
        result.chat_ids.map(async (chatId) => {
          const chatInfo = await client.send({
            '@type': 'getChat',
            'chat_id': chatId
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          let lastMessage = null;
          try {
            const messages = await client.send({
              '@type': 'getChatHistory',
              'chat_id': chatId,
              'limit': 1,
              'offset': 0,
              'from_message_id': 0
            });
            
            if (messages.messages.length > 0) {
              lastMessage = messages.messages[0];
            }
          } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, e);
          }
          
          return {
            ...chatInfo,
            lastMessage
          };
        })
      );
      
      setChats(chatsWithDetails);
      setError('');
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:', err);
    } finally {
      setIsLoading(false);
      setIsRefreshing(false);
    }
  }, [client]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchChats();
    
    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
    const updateHandler = client.onUpdate((update) => {
      if (
        update['@type'] === 'updateNewMessage' || 
        update['@type'] === 'updateChatLastMessage' || 
        update['@type'] === 'updateChatReadInbox'
      ) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        setIsRefreshing(true);
        fetchChats();
      }
    });
    
    return () => {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      if (updateHandler) updateHandler();
    };
  }, [client, fetchChats]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  const handleRefresh = () => {
    setIsRefreshing(true);
    fetchChats();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatLastMessage = (message) => {
    if (!message) return '';
    
    if (message.content['@type'] === 'messageText') {
      return message.content.text.text.substring(0, 50) + (message.content.text.text.length > 50 ? '...' : '');
    } else if (message.content['@type'] === 'messagePhoto') {
      return 'üñºÔ∏è –§–æ—Ç–æ';
    } else if (message.content['@type'] === 'messageVideo') {
      return 'üé• –í–∏–¥–µ–æ';
    } else if (message.content['@type'] === 'messageDocument') {
      return 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç';
    } else if (message.content['@type'] === 'messageSticker') {
      return 'üîñ –°—Ç–∏–∫–µ—Ä';
    } else if (message.content['@type'] === 'messageVoiceNote') {
      return 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    } else {
      return '–°–æ–æ–±—â–µ–Ω–∏–µ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    
    const date = new Date(timestamp * 1000);
    const now = new Date();
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    if (date.toDateString() === now.toDateString()) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—á–µ—Ä–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
      return '–í—á–µ—Ä–∞';
    }
    
    // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
    return date.toLocaleDateString();
  };

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      <div className="bg-blue-500 p-4 text-white flex justify-between items-center">
        <h1 className="text-xl font-bold">Telegram MVP</h1>
        {!isLoading && (
          <button 
            onClick={handleRefresh}
            disabled={isRefreshing}
            className="text-sm bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded transition-colors disabled:opacity-50"
          >
            {isRefreshing ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–û–±–Ω–æ–≤–∏—Ç—å"}
          </button>
        )}
      </div>
      
      {isLoading ? (
        <div className="flex items-center justify-center flex-grow">
          <div className="loader">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</div>
        </div>
      ) : error ? (
        <div className="p-4 text-red-500 text-center">
          {error}
          <button 
            onClick={handleRefresh}
            className="block mx-auto mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      ) : (
        <div className="flex-grow overflow-y-auto">
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ */}
          {isRefreshing && !isLoading && (
            <div className="p-2 text-center text-blue-500 bg-blue-50 border-b border-blue-100">
              <span className="inline-block animate-spin mr-2">‚Üª</span>
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤...
            </div>
          )}
          
          {chats.length === 0 ? (
            <div className="p-4 text-center text-gray-500">
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤
            </div>
          ) : (
            <ul>
              {chats.map((chat) => (
                <li 
                  key={chat.id}
                  onClick={() => onChatSelect(chat)}
                  className="hover:bg-gray-200 cursor-pointer border-b border-gray-200 transition-colors"
                >
                  <div className="flex items-center p-4">
                    <div className="w-12 h-12 rounded-full bg-gray-300 flex-shrink-0 overflow-hidden">
                      {/* –ê–≤–∞—Ç–∞—Ä —á–∞—Ç–∞ */}
                      {chat.photo ? (
                        <img 
                          src={chat.photo.small.remote.id} 
                          alt={chat.title} 
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.target.onerror = null;
                            e.target.src = 'https://via.placeholder.com/48';
                          }}
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-blue-400 text-white font-bold">
                          {chat.title.charAt(0)}
                        </div>
                      )}
                    </div>
                    
                    <div className="ml-4 flex-grow">
                      <div className="flex justify-between">
                        <span className="font-semibold">{chat.title}</span>
                        <span className="text-xs text-gray-500">
                          {chat.lastMessage ? formatTime(chat.lastMessage.date) : ''}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1 truncate">
                        {chat.lastMessage ? formatLastMessage(chat.lastMessage) : ''}
                      </p>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
}

export default ChatList;